主要介绍在整个框架中有那些已有的接口是可以扩展的，主要涉及扩展接口的作用，原理性的内容相对较少。首先介绍整个框架中核心扩展点
的总体大图。其次从上到下介绍整个RPC层扩展点。然后介绍Remote层的扩展点。

RPC层扩展点
RPC层可以分为四层：Config,Proxy,Registry,Cluster。由于Config属于API的范畴，不做介绍

1.Proxy层主要的扩展接口是ProxyFactory.它帮我们生成了代理类，有两种默认实现：Javassist和JDK.
2.Registry层最重要的扩展点是RegistryFactory,整个框架的注册与服务发现客户端都是由这个扩展点负责创建的。
3.Cluster层负责整个dubbo框架的集群容错，涉及的扩展点比较多，包括容错（Cluster),路由（Router),负责均衡（LoadBalance)
,配置管理工厂（ConfiguratorFactory）和合并器（Merger)
3.1 Cluster扩展点主要负责容错机制，默认使用Failover机制

Remote层处于整个Dubbo框架的底层，涉及协议，数据的交换，网络的传输，序列化，线程池等，涵盖了一个远程调用的所有要素。
Remote层是对dubbo传输协议的封装，内部再划分为Transport传输层和Exchange信息交换层。其中Transport层只负责单向消息传输，
是对Mina，Netty等传输工具的抽象。而Exchange层是在传输层上实现了Request-Response语义，这样我们可以在不同传输方式上
都能做到统一的请求/响应处理。Serialize层是RPC的一部分，决定了在消费者和服务提供者之间的二进制数据传输格式。不同的序列化
库的选择会对RPC调用的性能产生重要影响，目前默认选择的是Hessian2序列化

Protocol层主要包含四大扩展点，分别是Protocol,Filter,ExporterListener和InvokerListener.
Protocol与Filter这两个扩展点使用的最多。

Exchange层只有一个扩展点接口Exchanger,这个接口主要是为了封装请求/响应模式，

Transport层为了屏蔽不同通信框架的异同，封装了统一的对外接口。主要的扩展点接口有Transporter,Dispatcher,
Codec2和ChannelHander
其中ChannelHander主要处理连接相关的事件，例如：连接上，断开，发送消息，收到消息，出现异常等。虽然接口上有
@SPI注解，但是在框架中实现类的使用确实直接new的方法。

还有其他的一些扩展点接口：TelnetHandler,StatusChecker,Container,CacheFactory,Validation,
LoggerAdapter和Compiler。