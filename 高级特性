1.dubbo高级特性概述
服务分组和版本：支持同一个服务有多个分组和多个版本实现，用于服务隔离，服务多个版本实现
参数回调：当消费方调用服务提供方时，支持服务提供方能够异步回调到当前消费方，用于stub做热数据缓存等。
隐式参数：支持客户端隐式传递参数到服务端
异步调用：并行发起多个请求，但只使用一个线程，用于业务请求非阻塞场景
泛化调用：泛化调用主要用于消费端没有API接口的情况。不需要引入接口jar包，而是直接通过GenericService接口来发起
服务调用。框架会自动把POJO对象转化为Map，只要参数名能对应上即可。适合网关和跨框架集成等场景。
上下文信息：上下文中存放的是当前调用过程中所需的环境信息等。
Telnet操作：支持服务端调用，状态检查和跟踪服务调用统计等。
Mock调用：用于方法调用失败时，构造Mock测试数据并返回。
结果缓存：结果缓存，用于加速热门数据的访问速度，dubbo提供声明式缓存，以减少用户加缓存的工作量。

2.服务分组和版本
    dubbo提供的服务分组和版本是强隔离的，如果服务指定了服务分组和版本，则消费方调用必须传递相同的分组名称和版本名称。
3.参数回调：
    dubbo支持异步参数回调，当消费方调用服务端方法时，允许服务端在某个时间点回调客户端的方法。在服务端回调客户端时，
    服务端不会重新开启TCP连接，会复用已经建立的从客户端到服务端的TCP连接。
4.隐式参数：
    dubbo服务提供者或消费者启动时，配置元数据会生成URL，一般是不可变的。在很多实际的使用场景中，在服务运行期需要动态
    改变属性值，在做动态路由和灰度发布场景中需要这个特性。dubbo框架支持消费方在RpcContext#setAttachment方法中
    设置隐式参数，在服务端RpcContext#getAttachment方法中获取隐式传递。
5.异步调用：
    2.7.0+版本才在服务端支持异步调用。在客户端实现异步调用非常简单，在消费接口时配置异步标识，在调用时从上下文中获取Future
    对象，在期望结果返回时再调用阻塞方法Future.get()即可。
6.泛化调用：
    Dubbo返回调用特性可以在不依赖服务接口API包的场景下发起远程调用。这种特性特别适合框架集成和网关类应用开发。dubbo在
    客户端发起泛化调用并不要求服务端是泛化暴露。
7.上下文信息：
    dubbo上下文信息的获取和存储同样是基于JDK的ThreadLocal实现的。上下文中存放的是当前调用过程中所需的环境信息。
    在客户端和服务端分别有一个拦截设置当前上下文信息，对应的分别是ConsumerContextFilter和ContextFilter。
8.Telnet操作：
    目前dubbo支持通过telnet登录进行简单的运维，比如查看特定机器暴露了那些服务，显示服务端口连接列表，跟踪服务调用情况，
    调用本地服务和服务健康状况等。
9.Mock调用
    dubbo提供服务容错的能力，通常用于服务降级，比如验权服务，当服务提供方"挂掉"后，客户端不抛出异常，而是通过Mock数据
    返回授权失败。
    目前dubbo提供以下几种方式来使用mock能力。
    <dubbo:reference mock="true">
    <dubbo:reference mock="com.foo.BarServiceMock">
    <dubbo:reference mock="return null">
    <dubbo:reference mock="throw com.alibaba.XXXException">
    <dubbo:reference mock="force:return fake">
    <dubbo:reference mock="force:throw com.foo.MockException">
10.结果缓存
    <dubbo:reference cache="lru">
    缓存对应实现类是LRUCache.缓存实现类LRUCache继承了JDK的linkedHashMap类，LinkedHashMap是基于链表的实现，
    它提供了钩子方法removeEldstEntry，它的返回值用于判断每次向集合中添加元素时是否应该删除最少访问元素。LRUCache
    重写了这个方法，当缓存值达到1000时，这个方法会返回true，链表会把头部节点移除。链表每次添加数据时都会在队列尾部添加，
    因此队列头部就是最少访问的数据。（LinkedHashMap 在更新数据时，会把更新数据更新到列表尾部）。



















